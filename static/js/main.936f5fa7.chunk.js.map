{"version":3,"sources":["components/inputs/textInput.tsx","helpers/constants.ts","components/pages/form.tsx","components/router.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ErrorMessage","styled","span","TextInput","props","Form","Field","error","htmlFor","id","label","register","placeholder","inputMode","maxLength","type","role","message","Regex","name","creditCardNumber","cvc","expiry","FormContainer","div","FormCard","Segment","CreditCardValidationForm","useState","showMessage","setShowMessage","useForm","handleSubmit","setError","setFocus","errors","formState","React","useEffect","Message","positive","onDismiss","header","Header","as","Divider","clearing","onSubmit","data","console","log","JSON","stringify","required","pattern","value","Group","widths","Button","onClick","HeaderBar","MenuIcon","Icon","PageTitle","h1","Placeholder","Navigation","nav","menuOpen","List","ul","ItemLink","Link","Menu","setMenuOpen","title","setTitle","handleClick","link","size","event","target","innerText","to","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.936f5fa7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FieldError, UseFormRegisterReturn } from \"react-hook-form\";\r\nimport { Form } from \"semantic-ui-react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface ITextInputProps {\r\n    id: string;\r\n  label: string;\r\n  error: FieldError | undefined;\r\n  register: UseFormRegisterReturn;\r\n  placeholder?: string;\r\n  inputMode?:\r\n    | \"text\"\r\n    | \"none\"\r\n    | \"tel\"\r\n    | \"url\"\r\n    | \"email\"\r\n    | \"numeric\"\r\n    | \"decimal\"\r\n    | \"search\"\r\n    | undefined;\r\n    maxLength?: number;\r\n}\r\nconst ErrorMessage = styled.span`\r\n  font-size: 12px;\r\n  color: #9f3a38;\r\n`;\r\n\r\nconst TextInput = (props: ITextInputProps) => {\r\n  return (\r\n    <Form.Field error={!!props.error}>\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      <input\r\n        {...props.register}\r\n        id={props.id}\r\n        data-testid={props.id}\r\n        placeholder={props.placeholder}\r\n        inputMode={props.inputMode}\r\n        maxLength={props.maxLength}\r\n        type=\"text\"\r\n        aria-invalid={!!props.error}\r\n      />\r\n      {props.error && <ErrorMessage role=\"alert\" aria-atomic=\"true\">{props.error.message}</ErrorMessage>}\r\n    </Form.Field>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","export const Regex = {\r\n  name: /[A-Za-z ]{1,50}/,\r\n  creditCardNumber:\r\n    /^(?:4[0-9]{12}(?:[0-9]{3})?|[25][1-7][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,\r\n  cvc: /[0-9]{3}/,\r\n  expiry: /^(0[1-9]|1[0-2])\\/?([0-9]{2})$/,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport {\r\n  Header,\r\n  Form,\r\n  Button,\r\n  Divider,\r\n  Segment,\r\n  Message,\r\n} from \"semantic-ui-react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport TextInput from \"../inputs/textInput\";\r\nimport { Regex } from \"../../helpers/constants\";\r\n\r\ninterface IFormInputs {\r\n  creditCardNumber: string;\r\n  name: string;\r\n  cvc: string;\r\n  expiry: boolean;\r\n}\r\n\r\nconst FormContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 50px;\r\n`;\r\n\r\nconst FormCard = styled(Segment)`\r\n  width: 70%;\r\n  max-width: 500px;\r\n  height: auto;\r\n`;\r\n\r\nconst CreditCardValidationForm = () => {\r\n  const [showMessage, setShowMessage] = useState(false);\r\n\r\n  // React hook form declarations\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setError,\r\n    setFocus,\r\n    formState: { errors },\r\n  } = useForm<IFormInputs>();\r\n\r\n  // Auto focus credit card number field initially\r\n  React.useEffect(() => {\r\n    setFocus(\"creditCardNumber\");\r\n  }, [setFocus]);\r\n\r\n  // Dismiss the submission message\r\n  const handleMessageDismiss = () => {\r\n    setShowMessage(false);\r\n  };\r\n\r\n  // The method that invoked when submit button clicked\r\n  const onSubmit = (data: IFormInputs) => {\r\n    console.log(JSON.stringify({ data }));\r\n    setShowMessage(true);\r\n    // TODO: use axio to POST JSON.stringify({ data }) through API\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormContainer role=\"main\">\r\n        <FormCard>\r\n          {showMessage && (\r\n            <Message\r\n              positive\r\n              onDismiss={handleMessageDismiss}\r\n              header=\"Credit card info submitted!\"\r\n            />\r\n          )}\r\n          \r\n          <Header as=\"h2\">Welcome John Doe</Header>\r\n\r\n          <Divider clearing />\r\n\r\n          <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <TextInput\r\n              id=\"credit-card-number-text-input\"\r\n              label=\"Credit Card Number\"\r\n              error={errors.creditCardNumber}\r\n              register={register(\"creditCardNumber\", {\r\n                required: \"Credit card number is required\",\r\n                pattern: {\r\n                  value: Regex.creditCardNumber,\r\n                  message: \"Card number is not valid\",\r\n                },\r\n              })}\r\n              placeholder=\"0000-0000-0000-0000\"\r\n              inputMode=\"numeric\"\r\n            />\r\n            <TextInput\r\n              id=\"credit-card-holder-name-text-input\"\r\n              label=\"Name\"\r\n              error={errors.name}\r\n              register={register(\"name\", {\r\n                required: \"Name is required\",\r\n                pattern: {\r\n                  value: Regex.name,\r\n                  message: \"Name value is not valid\",\r\n                },\r\n              })}\r\n              placeholder=\"Name\"\r\n            />\r\n\r\n            <Form.Group widths=\"equal\">\r\n              <TextInput\r\n                id=\"credit-card-cvc-text-input\"\r\n                label=\"CVC\"\r\n                error={errors.cvc}\r\n                register={register(\"cvc\", {\r\n                  required: \"CVC is required\",\r\n                  pattern: { value: Regex.cvc, message: \"CVC is not valid\" },\r\n                })}\r\n                placeholder=\"000\"\r\n                maxLength={3}\r\n              />\r\n              <TextInput\r\n                id=\"credit-card-expiry-date-text-input\"\r\n                label=\"Expiry (MM/YY)\"\r\n                error={errors.expiry}\r\n                register={register(\"expiry\", {\r\n                  required: \"Expiry date is required\",\r\n                  pattern: {\r\n                    value: Regex.expiry,\r\n                    message: \"Expiry date format is not valid\",\r\n                  },\r\n                })}\r\n                placeholder=\"MM/YY\"\r\n                maxLength={5}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Divider clearing />\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              onClick={() => {\r\n                setError(\"creditCardNumber\", {});\r\n              }}\r\n              aria-label=\"Submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </FormCard>\r\n      </FormContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreditCardValidationForm;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Icon } from \"semantic-ui-react\";\r\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nimport Form from \"./pages/form\";\r\n\r\ninterface IProps {\r\n  menuOpen?: any;\r\n}\r\n\r\nconst HeaderBar = styled.div`\r\n  width: 100%;\r\n  height: 50px;\r\n  background-color: black;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst MenuIcon = styled(Icon)`\r\n  cursor: pointer;\r\n  padding: 10px;\r\n  color: white;\r\n`;\r\n\r\nconst PageTitle = styled.h1`\r\n  margin-top: 5px;\r\n  color: white;\r\n`;\r\n\r\nconst Placeholder = styled.div`\r\n  width: 40px;\r\n`;\r\n\r\nconst Navigation = styled.nav`\r\n  height: 100vh;\r\n  background-color: black;\r\n  position: fixed;\r\n  top: 50px;\r\n  right: 0;\r\n  z-index: 1000;\r\n  width: ${(props: IProps) => (props.menuOpen ? \"100%\" : \"0\")};\r\n  transition: width 0.8s, background-color 0.8s linear;\r\n`;\r\n\r\nconst List = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  width: 100%;\r\n`;\r\n\r\nconst ItemLink = styled(Link)`\r\n  display: flex;\r\n  line-height: 3rem;\r\n  font-size: 2rem;\r\n  font-weight: 300;\r\n  color: white;\r\n  &:hover,\r\n  &:active {\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst Menu = () => {\r\n  const [menuOpen, setMenuOpen] = useState(false);\r\n  const [title, setTitle] = useState(\"Register Card Form\");\r\n\r\n  // Handle open/close menu\r\n  const handleClick = () => {\r\n    setMenuOpen(!menuOpen);\r\n  };\r\n\r\n  // Handle menu item clicked and header text changes\r\n  const menuItemClicked = (event: any) => {\r\n    handleClick();\r\n    const target = event.target as HTMLHeadElement;\r\n    setTitle(target.innerText);\r\n  };\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <HeaderBar role=\"banner\">\r\n        <MenuIcon\r\n          link\r\n          name={menuOpen ? \"angle left\" : \"bars\"}\r\n          size=\"big\"\r\n          data-testid=\"menu-icon\"\r\n          onClick={handleClick}\r\n        />\r\n        <PageTitle data-testid=\"page-title\">{menuOpen ? \"Menu\" : title}</PageTitle>\r\n        <Placeholder></Placeholder>\r\n      </HeaderBar>\r\n\r\n      <Navigation role=\"navigation\" menuOpen={menuOpen}>\r\n        <List>\r\n          <li>\r\n            <ItemLink onClick={menuItemClicked} to=\"/\" role=\"link\">\r\n              Register Card Form\r\n            </ItemLink>\r\n          </li> \r\n        </List>\r\n      </Navigation>\r\n        <Switch>\r\n          <Route path=\"/\">\r\n            <Form />\r\n          </Route>\r\n          <Route path=\"*\">\r\n            <h1>Page could not be found</h1>\r\n          </Route>\r\n        </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React from 'react';\nimport Menu from \"./components/router\";\n\nfunction App() {\n  return (\n    <>\n      <Menu />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nif (process.env.NODE_ENV !== \"production\") {\n  const axe = require(\"@axe-core/react\");\n  axe(React, ReactDOM, 1000);\n}\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}